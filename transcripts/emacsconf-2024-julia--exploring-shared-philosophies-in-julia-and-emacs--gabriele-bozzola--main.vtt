WEBVTT

00:00:00.000 --> 00:00:06.240
 Hello, and very excited to talk about share flaws between the Julia programming language and EMAX.

00:00:06.240 --> 00:00:11.280
 While Julia and EMAX look like different pieces of software, I think there is profound

00:00:11.280 --> 00:00:15.280
 commonalities between the two. Let's start by introducing Julia.

00:00:15.280 --> 00:00:21.520
 Julia is a high-level dynamic programming language. Julia is free and opens her software

00:00:21.520 --> 00:00:26.080
 and is used primarily for scientific computing. The reason Julia is used for scientific

00:00:26.080 --> 00:00:32.480
 computing is that while Julia is high-level and has a syntax like Python or MATLAB,

00:00:32.480 --> 00:00:37.680
 Julia can be high-performance. I use it to develop climate models that run on hundreds of

00:00:37.680 --> 00:00:44.640
 GPUs. Models are traditionally developed with C, C++ or Fortune. But how is this possible?

00:00:44.640 --> 00:00:50.240
 How can Julia be high-performance but also high-level at the same time? What makes Julia a Julia?

00:00:50.240 --> 00:00:56.720
 Well, what makes Julia a Julia is the idea of multiple this patch. Multiple this patch is the concept

00:00:56.720 --> 00:01:02.240
 where function code is resolved by looking at the types of every single argument involved.

00:01:02.240 --> 00:01:06.640
 So let's explore this with this example. Here I define a function add,

00:01:06.640 --> 00:01:11.760
 it takes to object and something together, and I call add with two different types,

00:01:11.760 --> 00:01:16.400
 first with just integers and second with floats. So let's look at what this produces.

00:01:17.360 --> 00:01:23.120
 Here is the output of add and Julia. So first we have add a function with one method,

00:01:23.120 --> 00:01:28.480
 I'm going to explain this in a second, and then we have our return value is 12 and 12.0.

00:01:28.480 --> 00:01:34.080
 What we cannot see here is that Julia has specialized code for the two different

00:01:34.080 --> 00:01:41.520
 function codes for integers and for a floating point. Let's make this more explicit by specifically

00:01:41.520 --> 00:01:48.240
 providing a new method for the case with floating point. So here now I have an add function specifically

00:01:48.240 --> 00:01:54.080
 for floating point. Instead of taking a plus b, this returns a exponent b, let's call this.

00:01:54.080 --> 00:02:00.400
 And what we can see here is that now we have two methods. So we add a new method to the same function.

00:02:00.400 --> 00:02:05.520
 This is a method that is specifically for floating points. And instead of having the value 12,

00:02:05.520 --> 00:02:13.920
 we have 100. And this is where the trick lies. Julia compiles the most specialized version that

00:02:13.920 --> 00:02:20.400
 can be compiled. So version with integers, versions with floats. And in this compiling is an

00:02:20.400 --> 00:02:27.280
 actual completion with LVM with optimization and so on. This is just ahead of time completion.

00:02:27.280 --> 00:02:34.080
 So as the Julia knows the type of function is compile if it's not compiled already, and then it's

00:02:34.080 --> 00:02:40.640
 used. When types are stable and well inferred, this can lead to code that is as performant or comparable

00:02:40.640 --> 00:02:47.440
 to see and fortune. So this is what makes Julia Julia multiple the spot with just ahead of time

00:02:47.440 --> 00:02:56.000
 completion of highly efficient code. So now what makes EMAX EMAX? Well, in my opinion what makes EMAX

00:02:56.000 --> 00:03:05.120
 EMAX is interactivity, extensibility, and community. And I claim the Julia has the same three.

00:03:05.120 --> 00:03:10.880
 And in interactivity, extensibility, and community are three key pillars for Julia.

00:03:10.880 --> 00:03:17.440
 More specifically, Julia encourages a repel driven introspective and interactive workflow.

00:03:17.440 --> 00:03:22.720
 It's largely open to extension and modification. To the point that most of Julia is written in Julia.

00:03:23.360 --> 00:03:28.880
 And Julia is a thriving and welcoming community with lots of packages. So let me showcase a little

00:03:28.880 --> 00:03:34.080
 bit of this repel driven introspective interactive workflow with the hope that the commonalities

00:03:34.080 --> 00:03:41.280
 with EMAX will emerge naturally. So let's start by opening a Julia repel here. I have a Julia

00:03:41.280 --> 00:03:48.000
 repel. Let me give you a tour of the Julia repel. So the repel comes with lots of useful feature

00:03:48.000 --> 00:03:54.800
 from a shell to a package manager. So for example, let's add the random package.

00:03:54.800 --> 00:04:01.040
 Yeah, I have the random package. I can look at what's inside. We have statistics with random

00:04:01.040 --> 00:04:06.960
 in this particular environment. The environments are fully declarative. So here we have the dependencies

00:04:06.960 --> 00:04:12.000
 with this environment. And I can explore and this manifests the specific versions you're used.

00:04:14.160 --> 00:04:20.720
 So we have a shell. We have a package manager. And then we have a very powerful help system.

00:04:20.720 --> 00:04:27.840
 So for example, I can ask for help for length. And here we can see we have what the help for length.

00:04:27.840 --> 00:04:34.240
 Lots of information about how to call length, the expected return values, examples.

00:04:34.240 --> 00:04:39.680
 And now you can probably start seeing that this is not the different from calling length. So this is

00:04:40.480 --> 00:04:48.640
 the output for length or for help for length in EMAX. So we have help and we can do more. We can even

00:04:48.640 --> 00:04:57.520
 look at the source code for length. So now what we can see here is that now what we cannot see

00:04:57.520 --> 00:05:03.120
 because this soon zoomed in because the font size is huge. But in this page here we can see the

00:05:03.120 --> 00:05:09.520
 implementation of length is this line here in the middle. Or is this few lines here in the middle.

00:05:09.520 --> 00:05:13.920
 And as you, or let's do this again, as we can see here at the bottom, what we're looking at,

00:05:13.920 --> 00:05:19.920
 this is the source code of Julia. We can change this. There's even a macro edit if you want to

00:05:19.920 --> 00:05:26.080
 if you want to change. Thanks. And yeah, I used the word macro. Julia supports

00:05:26.080 --> 00:05:32.400
 meta programming. And actually meta programming is one of the key features in Julia. It's used

00:05:32.400 --> 00:05:38.560
 extensively in the core, but it's also used extensively in packages. Both to extend the Julia

00:05:38.560 --> 00:05:43.280
 ecosystem and function all that is, but also to develop full domain specific languages.

00:05:43.280 --> 00:05:51.520
 Some of the useful macros are, well, I don't know, like time. Here we have built-in

00:05:51.520 --> 00:06:01.280
 big z performance tool in Julia. And I want to showcase more introspection macros. But for that,

00:06:01.280 --> 00:06:07.440
 I'm going to do slightly different. I'm going to open a file example.jl where I define a function,

00:06:07.440 --> 00:06:12.240
 or our function add. There was an master's, and I'll go back to that in a second. So now I'm going to

00:06:12.240 --> 00:06:21.920
 include this file, and I can call my function add. One, two, and we get three. And now what I can do

00:06:21.920 --> 00:06:32.160
 is this, but I can look at what code gets compiled when I call when I call one plus two. And here,

00:06:32.160 --> 00:06:38.800
 now we can see that there is some integer stuff. But if I make this floating point, now the

00:06:38.800 --> 00:06:46.000
 compiled code changes. Now maybe, uh, assembly code is a little bit too hard to read. So I can look at

00:06:46.000 --> 00:06:51.360
 the LVM IR representation. In this case, we can see that there is promotion. The promotion will

00:06:51.360 --> 00:06:58.000
 probably go away if I make everything float. So this with f add, floating point add for a double,

00:06:58.000 --> 00:07:06.000
 but we can also look at the, uh, Julia lower representation after the abstract syntax produced.

00:07:06.000 --> 00:07:11.120
 The reason I put this in a file is because now what I can do is I can change this. And now,

00:07:11.120 --> 00:07:18.640
 one and two will be two. So this, to me, is very reminiscent of how our work in Amax,

00:07:18.640 --> 00:07:25.520
 where there's a global state that I can access and modify anytime with no restrictions. And this

00:07:25.520 --> 00:07:31.200
 happens in Julia too. Typically, we don't want to modify functions that are in other packages,

00:07:31.200 --> 00:07:38.640
 or there are in base, but we can do that. For example, I can change what is a plus for integers.

00:07:38.640 --> 00:07:44.800
 And if I change what is plus and make it so that any two integers return zero, well, I can do this.

00:07:44.800 --> 00:07:51.040
 This will break Julia because, well, Julia's built in Julia. So if we break this, uh, well, nothing will

00:07:51.040 --> 00:07:56.800
 work, but I can do that. This, to me, is one of the signs of the powerful introspective and powerful

00:07:56.800 --> 00:08:03.280
 interactive type workflows that Julia enabled. Finally, I want to talk about the general registry.

00:08:03.280 --> 00:08:12.160
 This is the equivalent of Malpa. It comes with, with Julia, but this is very akin to Malpa. It's

00:08:12.160 --> 00:08:20.000
 built upon Git essentially. It's collaborative. It's relies heavily on GitHub GitLab. It's

00:08:20.000 --> 00:08:26.240
 heavily automated and comes with lots and lots of tools and packages. What's beautiful about all

00:08:26.240 --> 00:08:31.920
 these tools and packages is that in the same way many of Emacs packages just play nicely with

00:08:31.920 --> 00:08:38.960
 Trader without any input from the developers. The same is true for Julia packages. The Julia

00:08:38.960 --> 00:08:45.600
 packages are highly composable, so two developers can develop two distinct packages that end up

00:08:45.600 --> 00:08:53.440
 playing nicely together for free because of the intrinsic structure and tristic way Julia objects

00:08:53.440 --> 00:08:59.120
 are built. So with all of this, I also want to mention that the community in addition to having

00:08:59.120 --> 00:09:04.720
 all these packages is it's highly active, highly collaborative. The community meets regularly

00:09:04.720 --> 00:09:10.480
 on places like Slack as opposed to the Emacs community that I'd say maybe means I'm right at it.

00:09:10.480 --> 00:09:15.280
 So with all of this, I want to thank you for your attention. Enjoy Emacs. Enjoy.

00:09:15.280 --> 00:09:17.280
 Julia.

