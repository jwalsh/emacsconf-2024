WEBVTT

00:00:00.000 --> 00:00:16.320
 Welcome everyone to my EmacsCons presentation where we're going to look at

00:00:16.320 --> 00:00:30.120
 lists the demo app from 1978 but done in modern elisp. Then we're going to look at

00:00:30.120 --> 00:00:40.100
 getting inferior lists working, my dear commonlisp. And then we're going to use the

00:00:40.100 --> 00:00:44.840
 commonlisp interface manager, the open source child, the commonlisp interface

00:00:44.840 --> 00:00:56.680
 manager, mid-clim from inferior lists in superior lists, which is the opposite

00:00:56.680 --> 00:01:00.140
 order that I initially thought we were going to do things in but this is how it's

00:01:00.140 --> 00:01:04.520
 kind of turned out. So it's this article I thought from 1978 was interesting to

00:01:04.520 --> 00:01:11.720
 us today, programming in an interactive environment, the list experience,

00:01:11.720 --> 00:01:20.480
 explaining what all these list programmers were doing to people unfamiliar

00:01:20.480 --> 00:01:25.360
 with list programming. List systems have been used for highly interactive

00:01:25.360 --> 00:01:30.840
 programming for more than a decade. This was from 1978 and we're just going to go

00:01:30.840 --> 00:01:42.120
 and almost verbatim port the demo application for a list out of 1978 interlisp

00:01:42.120 --> 00:01:52.320
 and into EmacsLisp. And we're going to do it without ORG mode because I think

00:01:52.320 --> 00:01:59.480
 everyone is finding out how great ORG mode is already. For inferior lists I

00:01:59.480 --> 00:02:02.720
 thought instead of ORG mode we'll theme it around Slime mode and then it turned

00:02:02.720 --> 00:02:07.920
 out most of this presentation happens in EmacsLisp because this is an EmacsLisp

00:02:07.920 --> 00:02:16.120
 conference. But I found out that there's IL mode which is pretty similar to

00:02:16.120 --> 00:02:24.200
 Slime mode. But in our hearts we can imagine that this is an Emacs

00:02:24.200 --> 00:02:31.080
 example, home around Slime mode, superior list interactive interaction mode for

00:02:31.080 --> 00:02:36.160
 Emacs, instead of ORG mode. Though you know I do secretly use ORG mode as well,

00:02:36.160 --> 00:02:47.480
 not very secretly. But that means we're kind of improvising, improvising or

00:02:47.480 --> 00:02:57.200
 presentation mode. So we have this big buffer of Elisp and let's just, this is me,

00:02:57.200 --> 00:03:09.120
 not Sandwall, AdventRest. Let's make a keyboard macro, go get the S expression

00:03:09.120 --> 00:03:13.760
 wherever the cursor is, move it to the next S expression, paste it in here and

00:03:13.760 --> 00:03:24.000
 the keyboard macro, all right. And what was basically happening? So the demo

00:03:24.000 --> 00:03:32.600
 application in this case is a scheduling application. And so you can imagine

00:03:32.600 --> 00:03:37.160
 improvising a calendar like this if you weren't existingly using an ORG mode

00:03:37.160 --> 00:03:46.880
 integrated calendar. So you know just have a list and maybe each list is of

00:03:46.880 --> 00:03:52.680
 sublists where the first element, the car of the sublist I guess is a sensible

00:03:52.680 --> 00:03:58.240
 sounding date format like SAT, DEX, SEVEN. This is clearly the first day of

00:03:58.240 --> 00:04:06.640
 EmacsCon. And after that a list of basically from and two times and then a

00:04:06.640 --> 00:04:20.080
 quick written description of of the of whatever event was at that time. So

00:04:20.080 --> 00:04:24.880
 similar to what we were seeing recently as me recording this in our

00:04:24.880 --> 00:04:30.440
 structured interpretation of computer programs, study group, you have all these

00:04:30.440 --> 00:04:41.280
 little methods. So hours of a time is actually just car of the time, minutes of

00:04:41.280 --> 00:04:47.440
 the time, cat or time. And so we all know these kind of little basically turning

00:04:47.440 --> 00:04:53.720
 car and cat or which we do use into descriptive names like from and to. You can see

00:04:53.720 --> 00:05:00.240
 how this lines up with the appointments. So for reproducibly building Emacs

00:05:00.240 --> 00:05:06.920
 described event, I guess from would be 1625. Let's just grab that and let's

00:05:06.920 --> 00:05:13.920
 really use those because we're interactive programming, right? So we have this

00:05:13.920 --> 00:05:26.120
 quoted form and then let's do from of that great and let's do minutes. So from

00:05:26.120 --> 00:05:35.200
 1625 1645 reproducibly building Emacs. So when I do from to that I get 1625 and I

00:05:35.200 --> 00:05:44.940
 do minutes to 1625. I get 25. And a description of this number in octal hex and

00:05:44.940 --> 00:05:54.720
 hexadec. What was up next? Okay. Getting next day from date. And so what was

00:05:54.720 --> 00:06:01.960
 it? Saturdays, December 27. So what happens? So this function, ACIS was part of

00:06:01.960 --> 00:06:10.800
 sandwell's personal exploration of Adams using symbols with with with

00:06:10.800 --> 00:06:16.720
 property lists with with an attached property list every symbol. And so you can

00:06:16.720 --> 00:06:27.960
 kind of see how this works. I get whatever was keyed by the symbol next week day

00:06:27.960 --> 00:06:42.660
 out of the day symbol. So I guess we would do so if we had sat December 6. I guess

00:06:42.660 --> 00:06:59.220
 we get sad. Oh, it destructors that itself somehow get next week day. Sorry, next

00:06:59.220 --> 00:07:15.340
 day. Set December 6th. But of course these weren't defined yet. So what if we set

00:07:15.340 --> 00:07:32.380
 get set next week day. And it's gonna be something, right? Then if we next day set

00:07:32.380 --> 00:07:41.260
 December 6th. Sunday December 7th. Yeah, so that kind of makes sense in an intuitive

00:07:41.260 --> 00:07:50.020
 way. And you can see Cond is being used. So you're not a list person. Cond evaluates

00:07:50.020 --> 00:07:56.420
 a condition. If the condition returns non-nell executes the code attached to that

00:07:56.420 --> 00:08:04.300
 condition. It evaluates each of these conditions in terms and turn and then stops when one returns

00:08:04.300 --> 00:08:10.620
 non-nell as you might expect as a list programmer. Now let's keep marching along. Okay, but so

00:08:10.620 --> 00:08:14.500
 we have to populate this and this this was an interesting one. As you can see, I'm this

00:08:14.500 --> 00:08:23.180
 was my attempt. Let days, month, you, wed, so forth. Then I used CL loop from Emax less, you

00:08:23.180 --> 00:08:33.340
 know, four day and days for next and quarter days set for next week day. And this I thought

00:08:33.340 --> 00:08:40.020
 was surprisingly deep was that this programmer, Sandwell thought, are basically constantly

00:08:40.020 --> 00:08:46.140
 trying to break new ground and they lose interest very quickly when that's not what they're

00:08:46.140 --> 00:08:51.660
 doing. And it was making the point that we breaking new ground involves solving a problem

00:08:51.660 --> 00:08:59.060
 exactly once. And so you kind of should do it in the most expedient way possible to solve

00:08:59.060 --> 00:09:08.180
 it kind of for the first time. And after that, it's not breaking new ground anymore. And

00:09:08.180 --> 00:09:13.680
 so I thought that was a kind of fun point from from Sandwell's paper that we could kind

00:09:13.680 --> 00:09:29.500
 of chew on. Do something similar for months and month lengths. But as we can see, if I get

00:09:29.500 --> 00:09:44.220
 up nerd days, I think I think that characters in 1978 characters and symbols in 1978 were

00:09:44.220 --> 00:09:48.540
 more precious, which is why Sandwell was writing in this abbreviated way. So we might write

00:09:48.540 --> 00:09:55.100
 more verbosely these days. We get 28, but it is in fact a leap year. So let's just set

00:09:55.100 --> 00:10:08.780
 that to be 29. Now it's fine. Then I guess if we do, we're we doing next next day. Sure.

00:10:08.780 --> 00:10:23.020
 Next day, I don't know what day it was. Let's assume it was Sunday, February 28. Some kind

00:10:23.020 --> 00:10:44.020
 of table crept in there, but we can deal with it. Let's just set. Get sun next week day month.

00:10:44.020 --> 00:10:51.380
 So once we've we've solved it once, we should be fine, right? Okay, I think I have to speed

00:10:51.380 --> 00:11:00.900
 up a bit. There we go. Monday, February 29. And then what if we next day, Tuesday marks first.

00:11:00.900 --> 00:11:07.740
 Okay, it basically seems to be working. And I'd argue it's actually fun that we kind of had

00:11:07.740 --> 00:11:14.980
 to do that. Then just imagining, you're kind of functioning with other people day begins

00:11:14.980 --> 00:11:24.340
 at 900 ends at 1700, so kind of a nine to five imagining, though, though, perhaps shorter

00:11:24.340 --> 00:11:29.460
 is more appropriate, but let's not quibble about that. What was happening next in this

00:11:29.460 --> 00:11:40.140
 app? All is in. Oh, yeah. So get me the free slots in from start time list of appointments

00:11:40.140 --> 00:11:50.380
 remembering characters, I guess, were more precious is my my theory. And then entire. So if I go

00:11:50.380 --> 00:12:04.300
 holes in and then from 900 to where I've written nine space, zero, zero, and what's what are

00:12:04.300 --> 00:12:12.220
 my appointments? So I have a list of appointments that need to have start times and finish time.

00:12:12.220 --> 00:12:26.900
 So let's go 12, 59 to 13, one. The description, I guess, can be test. And then let's finish that

00:12:26.900 --> 00:12:46.380
 at 1700, like we were kind of thought. Oops. Some of these are meant to be arguments.

00:12:46.380 --> 00:13:02.340
 Okay, there we go. And so the available times between nine and five, if there's one appointment

00:13:02.340 --> 00:13:13.940
 from 12, 59 to one, one are from nine to 12, 59 and from one past one to five, which is

00:13:13.940 --> 00:13:19.140
 kind of what we were expecting. And so our appointment at this kind of coming along. Then

00:13:19.140 --> 00:13:35.460
 we have common holes. Kind of works in a sensible way. Do we have what are some common

00:13:35.460 --> 00:13:52.900
 holes from two lists of appointments, I guess, common holes? Yes, let's have one person

00:13:52.900 --> 00:14:03.100
 have an appointment from nine to 10. That's going to be their only appointment. And let's

00:14:03.100 --> 00:14:17.580
 have another person have an appointment from nine 30 to 10 30. Oh, we didn't do before

00:14:17.580 --> 00:14:27.500
 time yet. This is the order, sandwall, implemented things in there. Okay, there. So the common holes

00:14:27.500 --> 00:14:44.580
 are from nine 30 to 10. Let's actually be overlapping time. I'll record this if some kind

00:14:44.580 --> 00:15:07.860
 of problem has kept into my things. And then what to be the first start by doing, Emacs

00:15:07.860 --> 00:15:21.500
 Conf, Track 1, and Emacs Conf, Track 2, and we'll do it on Saturday, December 7th. I'm in

00:15:21.500 --> 00:15:34.660
 time and I'm being prompted, of course, Emacs Conf, Track 1, Emacs Conf, Track 2, the date

00:15:34.660 --> 00:15:54.220
 that we grabbed, let's say we want five minutes. And as always, I'm forgetting to quote things.

00:15:54.220 --> 00:16:00.860
 And so my opportunities for common times between Emacs Conf, Track 1, Emacs Conf, Track

00:16:00.860 --> 00:16:06.700
 2 on the first day of the conference, Saturday, December 7th for five minutes. I have an opportunity

00:16:06.700 --> 00:16:19.660
 between 9, 29, 40, 11, 40, and 1, 13, 10, 13, 25, 13, 45, 13, 55, and 16, 15, to 16, 25. So I

00:16:19.660 --> 00:16:30.140
 think that's all working. And it was done with almost exactly the same code.

00:16:30.140 --> 00:16:42.260
 Except for my loopy, populating, symbol, P list, bits earlier. In Interlisp in 1978, as Emacs

00:16:42.260 --> 00:16:53.740
 Lisp in 2024. And I thought that was pretty interesting that you could do that. I think set, set,

00:16:53.740 --> 00:17:05.340
 get, was put prop was the biggest difference in 1978 Interlisp and modern Emacs Lisp. And obviously

00:17:05.340 --> 00:17:12.380
 modern Emacs Lisp has common Lisp loop in it kind of. It's another big difference. How are we doing

00:17:12.380 --> 00:17:21.420
 for time? 17 minutes? Great. Because now let's get a bit closer to what my talk title is promised

00:17:21.420 --> 00:17:26.780
 of we're going to use common Lisp from Emacs Lisp. And we're going to use common Lisp

00:17:26.780 --> 00:17:34.220
 Interface Manager, the open source implementation of common Lisp Interface Manager from inferior

00:17:34.220 --> 00:17:46.780
 Lisp from Emacs Lisp. And what we just went over in Sandwall's paper. This was the starting point.

00:17:46.780 --> 00:17:53.020
 And Sandwall says, well, if you just kind of jammed these ideas using Lisp, you just kind of made

00:17:53.020 --> 00:18:02.220
 hour a synonym for car and minute a synonym for catter and so forth. You can then make a whole bunch

00:18:02.220 --> 00:18:10.780
 of improvements. Can we actually get a glimpse of the, no, I didn't really write this. Yeah, so you

00:18:10.780 --> 00:18:18.140
 can see, I basically just ported out of the interlisp code in the text of this paper. Yeah, you see

00:18:18.140 --> 00:18:26.620
 from Lambda of appointment, car appointment. And that's defined to, I guess, interlisp in 1978,

00:18:26.620 --> 00:18:34.700
 used define queue, whereas we used defon in ELSP. But I'd encourage you to explore that

00:18:34.700 --> 00:18:39.900
 yourselves. But the extension that I wanted to develop today is since common Lisp Interface

00:18:39.900 --> 00:18:46.940
 Manager is just Lisp. And inferior Lisp is just Lisp. And Emacs Lisp is just Lisp. And interlisp

00:18:46.940 --> 00:18:52.060
 in 1978 is just Lisp. We could kind of use them all together in a kind of funky way. But a complaint

00:18:52.060 --> 00:19:01.100
 that you often hear or a statement of confusion that you often hear as a Lisp person, people from

00:19:01.100 --> 00:19:09.820
 other languages often can't, can't kind of figure out how to get started with Lisp. So I'm

00:19:09.820 --> 00:19:18.780
 just gonna try and do everything here and now. This is the second piece of my three pieces. So let's

00:19:18.780 --> 00:19:28.060
 just get inferior Lisp and make claim happening. And so we normally use Slime Superior Lisp

00:19:28.060 --> 00:19:41.340
 Interaction Mode for Emacs, which we could get from, from the Emacs, from Emacs's package

00:19:41.340 --> 00:19:50.700
 manager. So if I go package Lisp packages. And then we wait for however fast my network is.

00:19:54.140 --> 00:20:10.140
 We're going to see how long it's been since I updated something. Yeah, but you see it's in Malper, right?

00:20:10.140 --> 00:20:21.500
 It's got to be somewhere here. Yeah, all right. So there's one Slime available and I can do one

00:20:22.380 --> 00:20:30.780
 possibly more recent one available in the Malapot package repositories. I don't know about you,

00:20:30.780 --> 00:20:36.220
 but I can sympathize with people who feel confused by this because I think if you look online,

00:20:36.220 --> 00:20:43.900
 if you did a kind of search engine result, it doesn't customize these like I customize them.

00:20:43.900 --> 00:20:56.140
 So let's just do this customize variable package archives. And you can see here I've inst,

00:20:56.140 --> 00:21:04.220
 GNU, non GNU, and Malper, it's Malper, not Malper stable. So you can set.

00:21:04.220 --> 00:21:13.020
 So that's how I do that. So we're just kind of totally get an inferior Lisp working.

00:21:13.020 --> 00:21:26.380
 And then like we saw before, it's my occur buffer still open. No, occur. Slime.

00:21:35.100 --> 00:21:44.060
 So we could install and execute that. I cloned Slime since commonless people might use Slime and Swank.

00:21:44.060 --> 00:21:55.180
 Like McTlem does outside of Emax. I think we can secretly see I've got it here already in my.emax.esline.

00:21:55.180 --> 00:22:01.900
 But you could install it like that. So the hotkey is I and then execute to execute the install. I

00:22:01.900 --> 00:22:06.940
 realize you all already know this. But many of you might not yet be commonless programmers. And you

00:22:06.940 --> 00:22:18.060
 can use both superior and inferior Lisp. Instead of package archives in Emax, in inferior Lisp,

00:22:18.060 --> 00:22:25.020
 and with great controversy, we often use quick Lisp. People sometimes complain quick Lisp

00:22:25.020 --> 00:22:31.420
 releases get out of date quite quickly. But there was one recently. So they're pretty in date.

00:22:32.060 --> 00:22:40.060
 And so this should be a, yeah. So basically you download quick Lisp.Lisp, you check it's

00:22:40.060 --> 00:22:47.500
 Sha 256 Sum. So I guess in U over here, I press D,

00:22:47.500 --> 00:22:57.980
 screw tape downloads quick Lisp.Lisp, great. We open a shell, realize that this is this is just

00:22:57.980 --> 00:23:09.660
 riveting for all of our experts there. Sha 256 downloads.

00:23:09.660 --> 00:23:24.380
 Quick Lisp.Lisp. Your Sha 256 might be different lines. Somebody please tell me during the actual

00:23:24.380 --> 00:23:32.460
 conference the right Emax idiom to do this. I guess it will be tools decrypt something.

00:23:32.460 --> 00:23:37.420
 But then once you have quick Lisp, let's go back to our shell.

00:23:37.420 --> 00:23:47.820
 I'm on open BSD or a BSD. So I type package ad ECL to get embeddable commonless.

00:23:53.340 --> 00:24:01.740
 However, I think I already have it. And then let's start embeddable common Lisp.

00:24:01.740 --> 00:24:06.700
 Quick Lisp inserts itself already.

00:24:06.700 --> 00:24:16.860
 But just loading that quick Lisp.Lisp file kind of would get you here anyway.

00:24:16.860 --> 00:24:28.380
 Now let's QL, quick load, midclim. I'm actually following my plan.

00:24:28.380 --> 00:24:41.740
 Midclim is kind of like Emax in that it handles all sorts of graph or stuff like if you have GTK

00:24:41.740 --> 00:24:48.060
 Emax, you know, it can do really a lot of stuff. And that's the reason why compiling and loading

00:24:48.060 --> 00:24:57.820
 the midclim package takes a while. And I do use my old computer laptop, my old computer

00:24:57.820 --> 00:25:04.140
 challenge laptop all the time. So when you do this, your computer will be substantially faster

00:25:04.140 --> 00:25:15.260
 or you will be feeling smug about how slow you're running your computer. And so there's no problem.

00:25:15.260 --> 00:25:23.340
 Next we're going to start swank, which is the Lisp part of Emax's slime mode.

00:25:27.420 --> 00:25:36.380
 So if I remember we looked at this before, so in my dot Emax dot D, and then there should be

00:25:36.380 --> 00:25:47.980
 slime, start swank. Let's just grab that and load it. You don't have to type sharp sign P,

00:25:47.980 --> 00:25:54.780
 the string work as well as a path name, but it's kind of fun to do so. Now slime connect,

00:25:54.780 --> 00:26:02.620
 you installed slime earlier, default values. Oh, the reason we had to do this and not use slime,

00:26:02.620 --> 00:26:11.900
 start slime normally was that Clim, Commonless Interface Manager, McClim implementation of the

00:26:11.900 --> 00:26:19.980
 Commonless Interface Manager spec also uses swank and McClim really wants to be in the driver's seat.

00:26:19.980 --> 00:26:27.660
 So so we can have our Emax connect to the McClim that to the swank that McClim was already running.

00:26:27.660 --> 00:26:33.260
 So in package, Clim user, I don't know if this is an Emax less idiom,

00:26:33.260 --> 00:26:38.380
 soon normally have user packages to absorb user code just for kind of fooling around.

00:26:41.820 --> 00:26:52.060
 And then let's just use, use, uh, Clim at all. And so Clim does lots of things around presentations,

00:26:52.060 --> 00:27:03.740
 but one thing it does is automatically to a large extent generate, um, graphical user interfaces.

00:27:03.740 --> 00:27:12.300
 And so there's a lot to it that's not about graphics, uh, kind of kind of richer interfaces,

00:27:12.300 --> 00:27:21.260
 than NC Commonless character streams. Um, but let's let's use it to grab a graphical

00:27:21.260 --> 00:27:30.060
 pop up that returns a value. So we have this accepting values tool. T is just choose whatever you

00:27:30.060 --> 00:27:37.660
 think the default stream is. We're going to want our own window T as well. Um, so just a keyword

00:27:37.660 --> 00:27:46.380
 argument. After that, we can just write things like accept string. And I'm just doing this in

00:27:46.380 --> 00:27:51.820
 for people only listening. I've just done this in my ECL slime REPL, enter a string,

00:27:56.140 --> 00:28:00.940
 all to enter. I think it's the shortcut to return that. As you can see, it's first return with

00:28:00.940 --> 00:28:08.300
 food bar bags. And it had second and third returns string being the type presentation type

00:28:08.300 --> 00:28:16.620
 that it got. And T, I think to indicate that it exited successfully. Um, we can also do

00:28:16.620 --> 00:28:22.540
 expression might be more interesting. There are a whole bunch of these, uh,

00:28:25.740 --> 00:28:32.140
 Climbs, examples folder is pretty good. And the documentation, everybody's documentation,

00:28:32.140 --> 00:28:38.460
 my Climbs documentation, you know, uh, list works and franzes documentation. I'll tell you about,

00:28:38.460 --> 00:28:45.660
 about the different, um, default presentation types you can accept. Um,

00:28:45.660 --> 00:28:51.900
 and they're, they're pretty intuitive. And they're, they're kind of very list compatible.

00:28:52.940 --> 00:28:59.820
 Everything kind of is we could accept an expression. Um, food bar bez.

00:28:59.820 --> 00:29:13.500
 Return food bar bez 123 because that's what I wrote. Um, and now the kind of piece to

00:29:13.500 --> 00:29:20.860
 resist all of putting those things together. Um, just run over to our scratch buffer.

00:29:22.060 --> 00:29:27.500
 Oh, or our IL thing, right? That's what we're actually doing. So now, I think we're going to do

00:29:27.500 --> 00:29:35.100
 now by all our meta colon. I think it's going to be slime.

00:29:35.100 --> 00:29:49.020
 Eval save because it'll eval asynchronously. There's a question of how to get the value out of the

00:29:49.020 --> 00:29:56.380
 asynchronous slime evaluation. And so an obvious way is to, is to yank it. Um,

00:29:56.380 --> 00:30:05.340
 I'm looking forward to learning from kicking Vegas. He finally makes it stick in my brain. How to,

00:30:05.340 --> 00:30:12.140
 options other than just starting to write a command in the mini buffer and then mashing,

00:30:12.140 --> 00:30:17.580
 mashing tab and looking at what the likely sounding results are. That's what I will be learning

00:30:17.580 --> 00:30:26.060
 this conference. Um, if anything, slime eval saves and then what was happening over here?

00:30:26.060 --> 00:30:34.300
 Accepting values T own window T except expression. Uh, kind of confusingly.

00:30:34.300 --> 00:30:43.020
 Slime eval save takes a string. Um, but it works really well. I argue. I think it's about to work really well.

00:30:45.420 --> 00:30:49.660
 Okay, this is great. So you can see I've, I've used, oh, please enter an expression.

00:30:49.660 --> 00:30:55.660
 So we're doing an expression. And so that's right. Like three, four over two,

00:30:55.660 --> 00:31:00.140
 five over six. That's an expression, right?

00:31:00.140 --> 00:31:08.220
 And now I've yanked it. I should have really been in scratch because I just want to dump.

00:31:10.300 --> 00:31:20.540
 Sorry, scratch. Dump whatever that did. Oh, yeah. And see, it kind of simplified that while it was reading it.

00:31:20.540 --> 00:31:31.980
 So, um, running in elus slime eval save accepting values T own window T except expression.

00:31:32.860 --> 00:31:45.340
 And, and I got the three returns all the way from McClim to inferior less to elus three to five over

00:31:45.340 --> 00:31:53.740
 six. Second return was a presentation type of expression return successfully T. Yes, that's

00:31:53.740 --> 00:32:00.380
 pretty cool. Um, how out of time are we? Oh, we did this in basically half an hour.

00:32:00.700 --> 00:32:10.460
 Maybe we could stop and assume there will be a bit under half an hour of interactive discussion.

00:32:10.460 --> 00:32:18.860
 And when I also watch this and also receive suggestions, there will be additions and changes to

00:32:18.860 --> 00:32:35.980
 make I think. But can we quickly defon, defon, accept date? Let's not take any arguments.

00:32:39.820 --> 00:32:49.260
 Let's do this. Accept date.

00:32:49.260 --> 00:32:57.500
 Saturday, December seven.

00:32:57.500 --> 00:33:07.980
 Oh, it doesn't return it. But it gets pretty close to returning it. I guess it yanks it. I would have to

00:33:07.980 --> 00:33:25.260
 call. I'm going to say it's slime sink at which point it will resolve the slime eval async.

00:33:25.260 --> 00:33:31.820
 And then I could get the first value out of my coloring pop, right?

00:33:32.940 --> 00:33:39.500
 Is coloring pop what I want? You know, you tell me in the in the interactive feedback,

00:33:39.500 --> 00:33:45.500
 which should be happening in lamb to them. Well, I'll record another draft of this later after

00:33:45.500 --> 00:33:52.460
 getting some feedback or worse to worse. This is just what you'll hear. Hopefully we have

00:33:52.460 --> 00:34:00.700
 some questions and constructive comments. All right, see everybody later. Thank you so much for being

00:34:00.700 --> 00:34:11.660
 here. Please do drop in to my live show. If you're so inclined on Wednesdays where you're not busy

00:34:11.660 --> 00:34:17.260
 with cool EMAX conferences. The list be go for climate. Thank you to everyone who helped.

00:34:17.260 --> 00:34:23.340
 Thank you to Sasha for really getting me into this conference and kind of getting me going and

00:34:23.340 --> 00:34:36.140
 submitting this pre-recorded talk. See you everybody later.

